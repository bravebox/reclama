/// Transform
/// @param {List} $params - Params
/// @require {mixin} vui-prefix

@mixin vui-transform($params) {
  @include vui-prefix('transform', $params);
}

/// Transform-Origin
/// @param {List} $params - Params
/// @require {mixin} vui-prefix

@mixin vui-transform-origin($params) {
  @include vui-prefix('transform-origin', $params);
}

// Transform-Style
/// @param {List} $params - Params
/// @require {mixin} vui-prefix

@mixin vui-transform-style($style: preserve-3d) {
  @include vui-prefix('transform-style', $style);
}

/// Transition
/// @param {List} $properties - Properties
/// @require {mixin} vui-prefix

@mixin vui-transition($properties...) {
  @if length($properties) >= 1 {
    @include vui-prefix('transition', $properties);
  } @else {
    @include vui-prefix('transition',  "all 0.2s ease-in-out 0s");
  }
}

/// Rotate
/// CSS Matrix Rotation Calculator http://www.boogdesign.com/examples/transforms/matrix-calculator.html
/// @param {Double} $deg [0] - Degree
/// @param {Double} $m11 [0] - M11
/// @param {Double} $m12 [0] - M12
/// @param {Double} $m21 [0] - M21
/// @param {Double} $m22 [0] - M22
/// @require {mixin} vui-prefix

@mixin vui-rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  @include vui-prefix('transform', rotate($deg + deg));
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
  zoom: 1;
}
